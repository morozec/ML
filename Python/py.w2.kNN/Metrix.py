>>> import pandas
>>> import numpy as np
>>> from sklearn.datasets import load_boston
>>> boston = load_boston()
        18.9,  15. ,  18.9,  21.7,  20.4,  18.2,  19.9,  23.1,  17.5,
        20.2,  18.2,  13.6,  19.6,  15.2,  14.5,  15.6,  13.9,  16.6,
        14.8,  18.4,  21. ,  12.7,  14.5,  13.2,  13.1,  13.5,  18.9,
        20. ,  21. ,  24.7,  30.8,  34.9,  26.6,  25.3,  24.7,  21.2,
        19.3,  20. ,  16.6,  14.4,  19.4,  19.7,  20.5,  25. ,  23.4,
        18.9,  35.4,  24.7,  31.6,  23.3,  19.6,  18.7,  16. ,  22.2,
        25. ,  33. ,  23.5,  19.4,  22. ,  17.4,  20.9,  24.2,  21.7,
        22.8,  23.4,  24.1,  21.4,  20. ,  20.8,  21.2,  20.3,  28. ,
        23.9,  24.8,  22.9,  23.9,  26.6,  22.5,  22.2,  23.6,  28.7,
        22.6,  22. ,  22.9,  25. ,  20.6,  28.4,  21.4,  38.7,  43.8,
        33.2,  27.5,  26.5,  18.6,  19.3,  20.1,  19.5,  19.5,  20.4,
        19.8,  19.4,  21.7,  22.8,  18.8,  18.7,  18.5,  18.3,  21.2,
        19.2,  20.4,  19.3,  22. ,  20.3,  20.5,  17.3,  18.8,  21.4,
        15.7,  16.2,  18. ,  14.3,  19.2,  19.6,  23. ,  18.4,  15.6,
        18.1,  17.4,  17.1,  13.3,  17.8,  14. ,  14.4,  13.4,  15.6,
        11.8,  13.8,  15.6,  14.6,  17.8,  15.4,  21.5,  19.6,  15.3,
        19.4,  17. ,  15.6,  13.1,  41.3,  24.3,  23.3,  27. ,  50. ,
        50. ,  50. ,  22.7,  25. ,  50. ,  23.8,  23.8,  22.3,  17.4,
        19.1,  23.1,  23.6,  22.6,  29.4,  23.2,  24.6,  29.9,  37.2,
        39.8,  36.2,  37.9,  32.5,  26.4,  29.6,  50. ,  32. ,  29.8,
        34.9,  37. ,  30.5,  36.4,  31.1,  29.1,  50. ,  33.3,  30.3,
        34.6,  34.9,  32.9,  24.1,  42.3,  48.5,  50. ,  22.6,  24.4,
        22.5,  24.4,  20. ,  21.7,  19.3,  22.4,  28.1,  23.7,  25. ,
        23.3,  28.7,  21.5,  23. ,  26.7,  21.7,  27.5,  30.1,  44.8,
        50. ,  37.6,  31.6,  46.7,  31.5,  24.3,  31.7,  41.7,  48.3,
        29. ,  24. ,  25.1,  31.5,  23.7,  23.3,  22. ,  20.1,  22.2,
        23.7,  17.6,  18.5,  24.3,  20.5,  24.5,  26.2,  24.4,  24.8,
        29.6,  42.8,  21.9,  20.9,  44. ,  50. ,  36. ,  30.1,  33.8,
        43.1,  48.8,  31. ,  36.5,  22.8,  30.7,  50. ,  43.5,  20.7,
        21.1,  25.2,  24.4,  35.2,  32.4,  32. ,  33.2,  33.1,  29.1,
        35.1,  45.4,  35.4,  46. ,  50. ,  32.2,  22. ,  20.1,  23.2,
        22.3,  24.8,  28.5,  37.3,  27.9,  23.9,  21.7,  28.6,  27.1,
        20.3,  22.5,  29. ,  24.8,  22. ,  26.4,  33.1,  36.1,  28.4,
        33.4,  28.2,  22.8,  20.3,  16.1,  22.1,  19.4,  21.6,  23.8,
        16.2,  17.8,  19.8,  23.1,  21. ,  23.8,  23.1,  20.4,  18.5,
        25. ,  24.6,  23. ,  22.2,  19.3,  22.6,  19.8,  17.1,  19.4,
        22.2,  20.7,  21.1,  19.5,  18.5,  20.6,  19. ,  18.7,  32.7,
        16.5,  23.9,  31.2,  17.5,  17.2,  23.1,  24.5,  26.6,  22.9,
        24.1,  18.6,  30.1,  18.2,  20.6,  17.8,  21.7,  22.7,  22.6,
        25. ,  19.9,  20.8,  16.8,  21.9,  27.5,  21.9,  23.1,  50. ,
        50. ,  50. ,  50. ,  50. ,  13.8,  13.8,  15. ,  13.9,  13.3,
        13.1,  10.2,  10.4,  10.9,  11.3,  12.3,   8.8,   7.2,  10.5,
         7.4,  10.2,  11.5,  15.1,  23.2,   9.7,  13.8,  12.7,  13.1,
        12.5,   8.5,   5. ,   6.3,   5.6,   7.2,  12.1,   8.3,   8.5,
         5. ,  11.9,  27.9,  17.2,  27.5,  15. ,  17.2,  17.9,  16.3,
         7. ,   7.2,   7.5,  10.4,   8.8,   8.4,  16.7,  14.2,  20.8,
        13.4,  11.7,   8.3,  10.2,  10.9,  11. ,   9.5,  14.5,  14.1,
        16.1,  14.3,  11.7,  13.4,   9.6,   8.7,   8.4,  12.8,  10.5,
        17.1,  18.4,  15.4,  10.8,  11.8,  14.9,  12.6,  14.1,  13. ,
        13.4,  15.2,  16.1,  17.8,  14.9,  14.1,  12.7,  13.5,  14.9,
        20. ,  16.4,  17.7,  19.5,  20.2,  21.4,  19.9,  19. ,  19.1,
        19.1,  20.1,  19.9,  19.6,  23.2,  29.8,  13.8,  13.3,  16.7,
        12. ,  14.6,  21.4,  23. ,  23.7,  25. ,  21.8,  20.6,  21.2,
        19.1,  20.6,  15.2,   7. ,   8.1,  13.6,  20.1,  21.8,  24.5,
        23.1,  19.7,  18.3,  21.2,  17.5,  16.8,  22.4,  20.6,  23.9,
        22. ,  11.9])
>>> from sklearn.preprocessing import scale
>>> data = boston['data']
>>> target = boston['target']
>>> scale_data = scale(data, axis = 0)
>>> linspace = np.linspace(1,10,200)

         1.18090452,   1.22613065,   1.27135678,   1.31658291,
         1.36180905,   1.40703518,   1.45226131,   1.49748744,
         1.54271357,   1.5879397 ,   1.63316583,   1.67839196,
         1.72361809,   1.76884422,   1.81407035,   1.85929648,
         1.90452261,   1.94974874,   1.99497487,   2.04020101,
         2.08542714,   2.13065327,   2.1758794 ,   2.22110553,
         2.26633166,   2.31155779,   2.35678392,   2.40201005,
         2.44723618,   2.49246231,   2.53768844,   2.58291457,
         2.6281407 ,   2.67336683,   2.71859296,   2.7638191 ,
         2.80904523,   2.85427136,   2.89949749,   2.94472362,
         2.98994975,   3.03517588,   3.08040201,   3.12562814,
         3.17085427,   3.2160804 ,   3.26130653,   3.30653266,
         3.35175879,   3.39698492,   3.44221106,   3.48743719,
         3.53266332,   3.57788945,   3.62311558,   3.66834171,
         3.71356784,   3.75879397,   3.8040201 ,   3.84924623,
         3.89447236,   3.93969849,   3.98492462,   4.03015075,
         4.07537688,   4.12060302,   4.16582915,   4.21105528,
         4.25628141,   4.30150754,   4.34673367,   4.3919598 ,
         4.43718593,   4.48241206,   4.52763819,   4.57286432,
         4.61809045,   4.66331658,   4.70854271,   4.75376884,
         4.79899497,   4.84422111,   4.88944724,   4.93467337,
         4.9798995 ,   5.02512563,   5.07035176,   5.11557789,
         5.16080402,   5.20603015,   5.25125628,   5.29648241,
         5.34170854,   5.38693467,   5.4321608 ,   5.47738693,
         5.52261307,   5.5678392 ,   5.61306533,   5.65829146,
         5.70351759,   5.74874372,   5.79396985,   5.83919598,
         5.88442211,   5.92964824,   5.97487437,   6.0201005 ,
         6.06532663,   6.11055276,   6.15577889,   6.20100503,
         6.24623116,   6.29145729,   6.33668342,   6.38190955,
         6.42713568,   6.47236181,   6.51758794,   6.56281407,
         6.6080402 ,   6.65326633,   6.69849246,   6.74371859,
         6.78894472,   6.83417085,   6.87939698,   6.92462312,
         6.96984925,   7.01507538,   7.06030151,   7.10552764,
         7.15075377,   7.1959799 ,   7.24120603,   7.28643216,
         7.33165829,   7.37688442,   7.42211055,   7.46733668,
         7.51256281,   7.55778894,   7.60301508,   7.64824121,
         7.69346734,   7.73869347,   7.7839196 ,   7.82914573,
         7.87437186,   7.91959799,   7.96482412,   8.01005025,
         8.05527638,   8.10050251,   8.14572864,   8.19095477,
         8.2361809 ,   8.28140704,   8.32663317,   8.3718593 ,
         8.41708543,   8.46231156,   8.50753769,   8.55276382,
         8.59798995,   8.64321608,   8.68844221,   8.73366834,
         8.77889447,   8.8241206 ,   8.86934673,   8.91457286,
         8.95979899,   9.00502513,   9.05025126,   9.09547739,
         9.14070352,   9.18592965,   9.23115578,   9.27638191,
         9.32160804,   9.36683417,   9.4120603 ,   9.45728643,
         9.50251256,   9.54773869,   9.59296482,   9.63819095,
         9.68341709,   9.72864322,   9.77386935,   9.81909548,
         9.86432161,   9.90954774,   9.95477387,  10.        ])
>>> from sklearn.neighbors import KNeighborsRegressor
>>> knr = KNeighborsRegressor(5,weights='distance')
>>> from sklearn.model_selection import cross_val_score
>>> from sklearn.model_selection import KFold
>>> kFold = KFold(5, True, 42)

>>> max_av_score = -99999999
>>> max_av_score_p = 0
>>> for p in linspace:
	knr = KNeighborsRegressor(5,weights='distance',p=p)
	score = cross_val_score(estimator=knr, X = scale_data, y=target, scoring='neg_mean_squared_error', cv=kFold)
	average_score = score.mean()
	if average_score > max_av_score:
		max_av_score = average_score
		max_av_score_p = p

